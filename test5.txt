===============================================================================



             MUCGLE: Multiple Unite and Conquer GMRES/LS-ERAM Method



===============================================================================
            Developed by Xinzhe WU at Maison de la Simulation, France
===============================================================================



-------------------------------------------------------------------------------
                              Start Initialization
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Initialization ]> GMRES executable number is 1 
Initialization ]> Each GMRES Proc number is 1 
Initialization ]> ERAM executable number is 2 
Initialization ]> Each ERAM Proc number is 1 
Initialization ]> Thus Total proc number = 1 + 1 + 1 * 1 + 2 * 1 = 5 
Initialization ]> GMRES executable name list is: [ ./gmres.exe  ]
Initialization ]> ERAM executable name list is: [ ./arnoldi.exe  ./arnoldi2.exe  ]
Initialization ]> LS executable name list is: [ ./lsqr.exe  ]
Parser Matrix filename Flag = --filename="utm300_cp.mtx"  
Parser Arnoldi runtime Flag = --eps-quiet  
Parser Arnoldi runtime Flag = --eps-nodebug  
Parser Arnoldi runtime Flag = --eps-exsitu  
Parser Arnoldi runtime Flag = --eps-sort="LI"  
Parser Arnoldi runtime Flag = --eps-nonherm  
Parser Arnoldi runtime Flag = --eps-blockSize=1  
Parser Arnoldi runtime Flag = --eps-tol=0.1  
Parser Arnoldi runtime Flag = --eps-no-print-matrix  
Parser Arnoldi runtime Flag = --eps-all-print  
Parser GMRES runtime Flag = --ksp-nodebug  
Parser GMRES runtime Flag = --ksp-frequency=1  
Parser GMRES runtime Flag = --ksp-tol=1e-05  
Parser GMRES runtime Flag = --ksp-num-rhs=2  
Parser GMRES runtime Flag = --ksp-block-size=2  
Parser GMRES runtime Flag = --ksp-no-precond  
Parser GMRES runtime Flag = --ksp-num-blocks=120  
Parser GMRES runtime Flag = --ksp-fixed-tol  
Parser GMRES runtime Flag = --ksp-no-print-matrix  
Parser GMRES runtime Flag = --ksp-all-print  
Parser GMRES runtime Flag = --ksp-no-dump-data  
Parser GMRES runtime Flag = --ksp-lsp-degree=2  
Parser GMRES runtime Flag = --ksp-lsp-latency=1  
Parser GMRES runtime Flag = --ksp-use-lsp  
-------------------------------------------------------------------------------
                           Start Spawning Executables
-------------------------------------------------------------------------------
Teuchos::GlobalMPISession::GlobalMPISession(): started processor with name mdlsmc232 and rank 0!
Testing Scalar == complex<double>
GMRES ]> Building problem...
Teuchos::GlobalMPISession::GlobalMPISession(): started processor with name mdlsmc232 and rank 0!
Info ]> The Comm world size of ERAM is 1 
Arnoldi in Trilinos said: my rank = 0
Parser the MATRIX file NAME = utm300_cp.mtx ! 
Anasazi Version 12.12d

Anasazi Scalar type == complex<double>
ERAM ]> Building problem... complex<double>
GMRES ]> Matrix Loaded ... complex<double>

Tpetra::CrsMatrix (Kokkos refactor): {isFillComplete: true, global dimensions: [300, 300], global number of entries: 3155}

 "Tpetra::MultiVector":
  Template parameters:
   Scalar: complex<double>
   LocalOrdinal: int
   GlobalOrdinal: int
   Node: Serial/Wrapper
  Global number of rows: 300
  Number of columns: 2
  Process 0 of 1:
   Local number of rows: 300
   isConstantStride: 1
   Column stride: 300
   Values: 
   [(0.242578,0.0134696), (0.00290358,0.800519); (0.383139,0.414653), (0.329575,0.159199); (0.067769,0.993127), (0.656645,0.233858); (0.484308,0.765338), (0.453553,0.85881); (0.0318338,0.0309355), (0.0189666,0.771064); (0.93264,0.88788), (0.279271,0.703474); (0.59133,0.478779), (0.288143,0.826253); (0.833354,0.186335), (0.834267,0.518772); (0.735653,0.115053), (0.996421,0.856027); (0.698659,0.355604), (0.247206,0.79847); (0.6383,0.908211), (0.887297,0.792676); (0.294,0.264972), (0.510334,0.19194); (0.377494,0.54162), (0.927916,0.490576); (0.00928182,0.999465), (0.118974,0.603935); (0.0129019,0.842497), (0.335761,0.141711); (0.85247,0.467011), (0.729028,0.775473); (0.0536072,0.976748), (0.370061,0.609335); (0.196755,0.856973), (0.0863792,0.774898); (0.144214,0.800662), (0.708909,0.62829); (0.729398,0.985791), (0.67487,0.540647); (0.183406,0.49976), (0.651427,0.526156); (0.469862,0.970991), (0.107009,0.495015); (0.45077,0.0957919), (0.713391,0.966463); (0.974082,0.390235), (0.33648,0.226345); (0.68067,0.0266693), (0.175398,0.908631); (0.231241,0.468739), (0.369563,0.238485); (0.0979601,0.41541), (0.214315,0.990438); (0.796294,0.316403), (0.287307,0.774171); (0.778534,0.828493), (0.497949,0.0304823); (0.48714,0.369049), (0.316206,0.469366); (0.602845,0.0242644), (0.626297,0.177994); (0.811112,0.355793), (0.544319,0.361221); (0.806109,0.274877), (0.0442236,0.26535); (0.859817,0.951019), (0.739612,0.661904); (0.777276,0.680837), (0.620537,0.360907); (0.835185,0.96113), (0.762332,0.516737); (0.705425,0.0737512), (0.797348,0.026271); (0.536857,0.957186), (0.536283,0.309401); (0.418065,0.418777), (0.103563,0.581158); (0.381617,0.836927), (0.521791,0.745887); (0.240062,0.726211), (0.120218,0.510554); (0.431613,0.116691), (0.886917,0.416917); (0.223913,0.309588), (0.119686,0.560608); (0.244801,0.377034), (0.139295,0.127851); (0.807539,0.314736), (0.798873,0.660291); (0.77523,0.283334), (0.5153,0.645399); (0.996349,0.632867), (0.226657,0.424544); (0.600911,0.50948), (0.303139,0.859159); (0.834129,0.199443), (0.881966,0.200447); (0.0359808,0.730005), (0.916708,0.111402); (0.197911,0.293197), (0.339775,0.597344); (0.770347,0.21475), (0.55579,0.159578); (0.30922,0.0606627), (0.0301115,0.0839348); (0.55759,0.416917), (0.692525,0.262943); (0.115945,0.685545), (0.280891,0.936124); (0.959951,0.893088), (0.438842,0.616573); (0.136134,0.9978), (0.750608,0.463606); (0.0279733,0.148065), (0.819087,0.396696); (0.522975,0.641339), (0.273751,0.930812); (0.989146,0.578133), (0.157398,0.388514); (0.68053,0.674978), (0.757415,0.872203); (0.362046,0.91471), (0.112852,0.702801); (0.530369,0.917611), (0.971104,0.343069); (0.283109,0.208989), (0.959898,0.00690857); (0.471816,0.806578), (0.112382,0.807168); (0.161689,0.514298), (0.0735357,0.913772); (0.813117,0.0641685), (0.774307,0.779445); (0.479624,0.0433095), (0.137255,0.8461); (0.902915,0.294501), (0.403923,0.734744); (0.68573,0.0660333), (0.846237,0.70857); (0.82122,0.242774), (0.930294,0.456675); (0.310257,0.492554), (0.330217,0.96423); (0.356179,0.307991), (0.806191,0.652443); (0.396982,0.0709161), (0.615135,0.577411); (0.886517,0.684032), (0.538897,0.238898); (0.528227,0.902819), (0.155326,0.566297); (0.686503,0.063316), (0.757429,0.109921); (0.15214,0.023765), (0.441629,0.458857); (0.418943,0.174793), (0.0102109,0.615138); (0.752751,0.490316), (0.626224,0.940081); (0.747744,0.329275), (0.949292,0.756199); (0.117577,0.118128), (0.435557,0.405874); (0.374985,0.37697), (0.527192,0.520868); (0.728745,0.014481), (0.23054,0.689803); (0.382013,0.4905), (0.517595,0.226136); (0.827577,0.0796647), (0.670945,0.575546); (0.923967,0.118042), (0.196417,0.175663); (0.938252,0.195973), (0.364583,0.54078); (0.726118,0.857863), (0.884282,0.125576); (0.103638,0.83891), (0.549826,0.919002); (0.56511,0.810401), (0.673458,0.803363); (0.406969,0.934977), (0.118442,0.651203); (0.160874,0.816055), (0.760686,0.857151); (0.43174,0.248101), (0.128768,0.210019); (0.830523,0.596219), (0.796595,0.378999); (0.645779,0.608169), (0.838324,0.70963); (0.495466,0.304382), (0.746077,0.31531); (0.755627,0.82861), (0.41795,0.492887); (0.455551,0.438145), (0.957324,0.746058); (0.897431,0.118944), (0.991549,0.962731); (0.0989933,0.780746), (0.611919,0.518667); (0.997533,0.539817), (0.23098,0.0879289); (0.698849,0.561277), (0.821047,0.336311); (0.384786,0.0925763), (0.38495,0.855261); (0.929386,0.192648), (0.373987,0.604567); (0.841255,0.969377), (0.961873,0.205882); (0.318446,0.128), (0.254343,0.736389); (0.288386,0.909935), (0.496847,0.503306); (0.279053,0.0418133), (0.0672413,0.124661); (0.755507,0.809), (0.176598,0.0832818); (0.866245,0.973542), (0.717544,0.770327); (0.313588,0.467796), (0.892734,0.186927); (0.243043,0.823443), (0.679681,0.397912); (0.599616,0.743698), (0.708933,0.0402234); (0.327666,0.0831767), (0.0348112,0.0711753); (0.951141,0.823081), (0.24247,0.19693); (0.52712,0.310802), (0.804822,0.641345); (0.646964,0.528517), (0.0788989,0.0534874); (0.786098,0.952491), (0.962365,0.474691); (0.51531,0.819254), (0.136725,0.938659); (0.207083,0.441171), (0.0380281,0.138184); (0.75717,0.750571), (0.454291,0.267119); (0.841331,0.249552), (0.47364,0.473533); (0.217529,0.00176163), (0.672279,0.987262); (0.607765,0.712493), (0.911148,0.665986); (0.871079,0.223777), (0.220761,0.326109); (0.0149748,0.680696), (0.913598,0.841281); (0.452619,0.175361), (0.414885,0.975499); (0.2884,0.13139), (0.20536,0.488496); (0.272306,0.65001), (0.152158,0.311775); (0.71964,0.99075), (0.00954666,0.45065); (0.535381,0.148002), (0.077606,0.324653); (0.469616,0.838895), (0.445801,0.571151); (0.313227,0.398227), (0.339158,0.225863); (0.00527989,0.739131), (0.0735559,0.253421); (0.580106,0.833602), (0.251237,0.539218); (0.347811,0.666053), (0.63568,0.878669); (0.354997,0.440056), (0.794691,0.376999); (0.0149171,0.71165), (0.21722,0.81399); (0.706767,0.635577), (0.732592,0.679834); (0.146365,0.957588), (0.961932,0.19832); (0.183773,0.67972), (0.166644,0.780481); (0.0481269,0.868372), (0.544126,0.118381); (0.730391,0.687771), (0.624782,0.711309); (0.373259,0.37167), (0.97475,0.622617); (0.663645,0.885499), (0.3196,0.518268); (0.586742,0.364694), (0.524627,0.409571); (0.406085,0.0745568), (0.665301,0.707467); (0.0756463,0.387668), (0.401349,0.48017); (0.531298,0.53009), (0.21871,0.859601); (0.229013,0.0196013), (0.306083,0.340893); (0.439384,0.726733), (0.392158,0.00249536); (0.208291,0.749222), (0.939486,0.938372); (0.16675,0.57513), (0.219865,0.266594); (0.211249,0.463603), (0.638577,0.569103); (0.769233,0.500986), (0.913738,0.191736); (0.0678485,0.329472), (0.501109,0.143887); (0.430096,0.618497), (0.30623,0.809072); (0.0832096,0.503956), (0.0697915,0.98614); (0.994747,0.709054), (0.0556401,0.143733); (0.0628703,0.660779), (0.721579,0.586075); (0.710643,0.782565), (0.167742,0.238722); (0.561767,0.616937), (0.208252,0.0914074); (0.851959,0.876326), (0.284119,0.192194); (0.416612,0.994392), (0.209011,0.844531); (0.751598,0.103922), (0.0306631,0.353948); (0.622708,0.854273), (0.809531,0.787265); (0.763145,0.172256), (0.557499,0.885382); (0.11394,0.992885), (0.617721,0.0356503); (0.414314,0.380143), (0.174285,0.205166); (0.0625008,0.450931), (0.23192,0.883898); (0.789566,0.228458), (0.670394,0.313703); (0.697292,0.386877), (0.404861,0.503297); (0.247649,0.231502), (0.918712,0.800518); (0.849283,0.902588), (0.298793,0.821078); (0.803928,0.613534), (0.860913,0.362889); (0.663458,0.738469), (0.0800079,0.69233); (0.452902,0.931007), (0.992491,0.796133); (0.436138,0.17179), (0.606507,0.556314); (0.273069,0.46522), (0.974473,0.961662); (0.955457,0.369525), (0.64756,0.546661); (0.607398,0.53323), (0.731811,0.545167); (0.999677,0.57527), (0.616679,0.521504); (0.555215,0.505), (0.913542,0.902156); (0.540809,0.380896), (0.537997,0.114862); (0.724384,0.72994), (0.48278,0.0838427); (0.104473,0.88574), (0.144594,0.193053); (0.639572,0.287519), (0.637846,0.278432); (0.332947,0.834822), (0.603558,0.992865); (0.86017,0.869593), (0.0782343,0.884445); (0.256493,0.871668), (0.858755,0.0969655); (0.117701,0.192914), (0.698857,0.683079); (0.305698,0.859094), (0.507383,0.578206); (0.796018,0.674653), (0.901389,0.649164); (0.900227,0.112347), (0.503072,0.124739); (0.221748,0.915445), (0.490035,0.0179636); (0.880067,0.285789), (0.913926,0.352767); (0.25732,0.771159), (0.956051,0.355495); (0.861763,0.644237), (0.801263,0.832426); (0.684291,0.882928), (0.590354,0.071406); (0.369671,0.0662473), (0.12046,0.565568); (0.41782,0.301778), (0.508785,0.157663); (0.980467,0.702029), (0.843338,0.987191); (0.00736497,0.783108), (0.710833,0.978494); (0.703318,0.672688), (0.543706,0.0726761); (0.870522,0.869669), (0.467931,0.508793); (0.524435,0.177187), (0.276186,0.851602); (0.980344,0.642137), (0.87419,0.508431); (0.393063,0.217912), (0.205537,0.461624); (0.447246,0.868569), (0.516344,0.195203); (0.03164,0.773726), (0.773563,0.265402); (0.00981986,0.0424671), (0.607063,0.915728); (0.744825,0.278844), (0.647633,0.765579); (0.523352,0.969781), (0.0846252,0.296072); (0.102328,0.819686), (0.0814753,0.354895); (0.470454,0.926986), (0.712017,0.865908); (0.854907,0.426604), (0.323326,0.133589); (0.934753,0.387852), (0.227858,0.614901); (0.632231,0.906357), (0.647462,0.890883); (0.147352,0.540272), (0.0712001,0.660782); (0.343122,0.859704), (0.760169,0.153688); (0.0379492,0.81188), (0.0322458,0.954971); (0.271485,0.855588), (0.203037,0.450057); (0.870384,0.540878), (0.114943,0.850321); (0.534808,0.524331), (0.339254,0.840568); (0.423039,0.0212741), (0.423854,0.721075); (0.554457,0.763045), (0.111855,0.944572); (0.498689,0.467937), (0.419167,0.935708); (0.617603,0.0460542), (0.447617,0.0942653); (0.0323964,0.486974), (0.316739,0.42861); (0.571333,0.395105), (0.640812,0.126182); (0.522923,0.772503), (0.741488,0.189016); (0.453133,0.808895), (0.791732,0.636806); (0.0947851,0.0528843), (0.803112,0.901782); (0.826935,0.303686), (0.247858,0.747615); (0.0426909,0.506413), (0.173673,0.927664); (0.285959,0.109358), (0.255446,0.28645); (0.982687,0.019645), (0.362304,0.237973); (0.173411,0.524346), (0.609926,0.0307753); (0.675854,0.0864445), (0.240033,0.232633); (0.87318,0.538257), (0.869466,0.111441); (0.478759,0.506533), (0.994693,0.810993); (0.29984,0.413003), (0.364756,0.461268); (0.344194,0.871592), (0.525305,0.807606); (0.838942,0.102172), (0.433054,0.341315); (0.196499,0.555389), (0.483428,0.972349); (0.42433,0.71424), (0.276188,0.898005); (0.233339,0.727394), (0.761736,0.492387); (0.302702,0.508484), (0.542169,0.238575); (0.0921238,0.325341), (0.72536,0.122732); (0.998453,0.999447), (0.762469,0.813792); (0.711751,0.399947), (0.401244,0.699546); (0.915277,0.0685847), (0.267303,0.559116); (0.703079,0.646217), (0.0626685,0.270106); (0.966967,0.821533), (0.673922,0.599593); (0.497814,0.752719), (0.354563,0.137302); (0.952958,0.36321), (0.630952,0.407931); (0.467853,0.199519), (0.10327,0.657417); (0.319607,0.637252), (0.205439,0.814377); (0.29362,0.877285), (0.231922,0.920619); (0.523256,0.367778), (0.845696,0.613875); (0.237859,0.69947), (0.39128,0.247175); (0.999001,0.202858), (0.275215,0.533857); (0.44218,0.722977), (0.532045,0.0798144); (0.0792627,0.168652), (0.439981,0.754637); (0.539282,0.71561), (0.181626,0.581734); (0.251904,0.75068), (0.204834,0.638125); (0.674102,0.637241), (0.959814,0.589224); (0.116275,0.231005), (0.0943623,0.947895); (0.506655,0.355788), (0.271339,0.390853); (0.732259,0.0843082), (0.0693773,0.023575); (0.967997,0.128374), (0.224712,0.736554); (0.585624,0.581955), (0.263367,0.401424); (0.922187,0.193661), (0.725768,0.983844); (0.864539,0.311585), (0.469049,0.309179); (0.811254,0.744299), (0.377796,0.622499); (0.429059,0.196342), (0.341344,0.974634); (0.917629,0.585903), (0.678547,0.333025); (0.274474,0.0861261), (0.156234,0.831857); (0.521532,0.393338), (0.0277981,0.203417); (0.826258,0.922274), (0.8248,0.405679); (0.661199,0.77827), (0.25296,0.503358); (0.376761,0.214791), (0.943552,0.279262); (0.99452,0.904006), (0.548919,0.679903); (0.626417,0.198418), (0.13235,0.411461); (0.813554,0.408778), (0.431367,0.99041); (0.32768,0.324292), (0.818946,0.0267777); (0.367318,0.511847), (0.0530477,0.571987); (0.620385,0.803852), (0.39365,0.0758189); (0.341577,0.879053), (0.288285,0.197878); (0.250295,0.716162), (0.730208,0.599556); (0.534048,0.751258), (0.745898,0.31198); (0.386674,0.821554), (0.449439,0.728522); (0.854751,0.796623), (0.262449,0.982537); (0.844887,0.0197765), (0.498591,0.826481); (0.383249,0.27113), (0.671144,0.919409); (0.883419,0.620394), (0.505628,0.0832026); (0.964801,0.41619), (0.385348,0.539567); (0.902504,0.390258), (0.510396,0.220121); (0.0743993,0.429715), (0.573296,0.384175)]
Building TIME = 0.077829
Teuchos::GlobalMPISession::GlobalMPISession(): started processor with name mdlsmc232 and rank 0!
Info ]> The Comm world size of ERAM is 1 
Arnoldi in Trilinos said: my rank = 0
Parser the MATRIX file NAME = utm300_cp.mtx ! 
Anasazi Version 12.12d

Anasazi Scalar type == complex<double>
ERAM ]> Building problem... complex<double>
ERAM ]> Matrix Loaded ... complex<double>
-------------------------------------------------------------------------------
                    Start Resolving Linear Systems by MUCGLE
-------------------------------------------------------------------------------
Info ]> The Comm world size of LS is 1 
ERAM ]> Matrix Loaded ... complex<double>
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
info===0
$} Ellipse Allocating work memory 5
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
aire = 0.036468
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Father has Array received from LS Component
Main ]> Father has sent preconditioned parameters to GMRES Component
info===0
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Father has Array received from LS Component
Main ]> Father has sent preconditioned parameters to GMRES Component
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Father has Array received from LS Component
Main ]> Father has sent preconditioned parameters to GMRES Component
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Father has Array received from LS Component
Main ]> Father has sent preconditioned parameters to GMRES Component
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Father has Array received from LS Component
Main ]> Father has sent preconditioned parameters to GMRES Component
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Father has Array received from LS Component
Main ]> Father has sent preconditioned parameters to GMRES Component
Main ]> Array receive from ERAM 0 Component
Main ]> Father send array to LS, length = 5
info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
GMRES ]> GMRES send exit signal
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Main ]> Array receive from ERAM 1 Component
Main ]> Father send array to LS, length = 20
Main ]> Father has Array received from LS Component
Main ]> Father has sent preconditioned parameters to GMRES Component
info===0
$} Ellipse Allocating work memory 8
$} Ellipse Computing Edges
----------------------
$} Ellipse Research two points optimal ellipse
Main ]> Father Receive exit type from GMRES 0 Component = 666
$} Ellipse Research three points optimal ellipse
Teuchos in Trilinos 12.12.1

Main ]> Father send exit type to ERAM and LS Component
Main ]> Father has final exit signal to GMRES Component
-------------------------------------------------------------------------------
                               Remove Application
-------------------------------------------------------------------------------
Info ]> LS Receive signal information from Father
Info ]> LS exit
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Evals[1] = -0.444916 + 0.517997i
Evals[2] = -0.830896 + 0.514120i
Evals[3] = -0.772372 + 0.425891i
Evals[4] = -0.468804 + 0.363482i
Evals[5] = -0.288347 + 0.357264i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Info ]> ERAM Receive signal information from Father
Info ]> ERAM exit
Evals2[1] = -0.444915 + 0.517993i
Evals2[2] = -0.830910 + 0.514104i
Evals2[3] = -0.773901 + 0.426167i
Evals2[4] = -0.770238 + 0.409806i
Evals2[5] = -0.755704 + 0.372639i
Evals2[6] = -0.467526 + 0.363579i
Evals2[7] = -0.288463 + 0.357064i
Evals2[8] = -0.518769 + 0.342855i
Evals2[9] = -0.184437 + 0.301197i
Evals2[10] = -0.920127 + 0.277260i
Evals2[11] = -1.122167 + 0.274605i
Evals2[12] = -1.298662 + 0.265459i
Evals2[13] = -0.172121 + 0.259941i
Evals2[14] = -0.141045 + 0.259276i
Evals2[15] = -0.883608 + 0.247614i
Evals2[16] = -0.795266 + 0.246100i
Evals2[17] = -0.157111 + 0.233680i
Evals2[18] = -0.098055 + 0.214591i
Evals2[19] = -0.524673 + 0.209678i
Evals2[20] = -0.109068 + 0.204309i


Arnoldi ]> Arnoldi send eigenvalues to FATHER
Info ]> ERAM Receive signal information from Father
Info ]> ERAM exit
GMRES ]> Close of GMRES after waiting a little instant
Main ]> Main Free the Arnoldi Components after waiting a little instant
Main ]> Main Free the Arnoldi Components after waiting a little instant
